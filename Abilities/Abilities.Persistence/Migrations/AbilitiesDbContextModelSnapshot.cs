// <auto-generated />
using Abilities.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Abilities.Persistence.Migrations
{
    [DbContext(typeof(AbilitiesDbContext))]
    partial class AbilitiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Abilities.Domain.Entities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Abilities.Domain.Entities.MysticalPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Material");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("MysticalPowers");
                });

            modelBuilder.Entity("Abilities.Domain.Entities.Ritual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<int>("Tradition")
                        .HasColumnName("Tradition");

                    b.HasKey("Id");

                    b.ToTable("Rituals");
                });

            modelBuilder.Entity("Abilities.Domain.Entities.Ability", b =>
                {
                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Adept", b1 =>
                        {
                            b1.Property<int>("AbilityId");

                            b1.Property<string>("Description")
                                .HasColumnName("AdeptDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("AdeptType");

                            b1.HasKey("AbilityId");

                            b1.ToTable("Abilities");

                            b1.HasOne("Abilities.Domain.Entities.Ability")
                                .WithOne("Adept")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "AbilityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Master", b1 =>
                        {
                            b1.Property<int>("AbilityId");

                            b1.Property<string>("Description")
                                .HasColumnName("MasterDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("MasterType");

                            b1.HasKey("AbilityId");

                            b1.ToTable("Abilities");

                            b1.HasOne("Abilities.Domain.Entities.Ability")
                                .WithOne("Master")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "AbilityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Novice", b1 =>
                        {
                            b1.Property<int>("AbilityId");

                            b1.Property<string>("Description")
                                .HasColumnName("NoviceDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("NoviceType");

                            b1.HasKey("AbilityId");

                            b1.ToTable("Abilities");

                            b1.HasOne("Abilities.Domain.Entities.Ability")
                                .WithOne("Novice")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "AbilityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Abilities.Domain.Entities.MysticalPower", b =>
                {
                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Adept", b1 =>
                        {
                            b1.Property<int>("MysticalPowerId");

                            b1.Property<string>("Description")
                                .HasColumnName("AdeptDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("AdeptType");

                            b1.HasKey("MysticalPowerId");

                            b1.ToTable("MysticalPowers");

                            b1.HasOne("Abilities.Domain.Entities.MysticalPower")
                                .WithOne("Adept")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "MysticalPowerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Master", b1 =>
                        {
                            b1.Property<int>("MysticalPowerId");

                            b1.Property<string>("Description")
                                .HasColumnName("MasterDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("MasterType");

                            b1.HasKey("MysticalPowerId");

                            b1.ToTable("MysticalPowers");

                            b1.HasOne("Abilities.Domain.Entities.MysticalPower")
                                .WithOne("Master")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "MysticalPowerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Abilities.Domain.Entities.AbilityTier", "Novice", b1 =>
                        {
                            b1.Property<int>("MysticalPowerId");

                            b1.Property<string>("Description")
                                .HasColumnName("NoviceDescription");

                            b1.Property<int>("Type")
                                .HasColumnName("NoviceType");

                            b1.HasKey("MysticalPowerId");

                            b1.ToTable("MysticalPowers");

                            b1.HasOne("Abilities.Domain.Entities.MysticalPower")
                                .WithOne("Novice")
                                .HasForeignKey("Abilities.Domain.Entities.AbilityTier", "MysticalPowerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
